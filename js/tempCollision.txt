        var intPos = new Vec2(Math.floor(this.pos.x), Math.floor(this.pos.y));
        var hit = false;
        var hitCounter = 0;
        var collidedWall;

        for (var i = intPos.y - 2; i < intPos.y + 3; i++) {
            for (var b = intPos.x - 2; b < intPos.x + 3; b++) {
                try {
                    if (world.getTile(b, i).type == "wall") {
                        var tileSize = world.getTile(b, i).size;
                        collidedWall = collideRectRect(
                            this.pos.x,
                            this.pos.y,
                            this.size.x,
                            this.size.y,
                            b,
                            i,
                            tileSize.x,
                            tileSize.y
                        );

                        if (collidedWall) {
                            if (this.pos.x - this.size.x / 2 < b - tileSize.x / 2) {
                                directionLock.right = true;
                                this.pos.x -=
                                    (b - tileSize.x / 2 - (this.pos.x - this.size.x / 2)) *
                                    this.moveSpeed *
                                    deltaTimeFixed;
                            }

                            if (this.pos.x + this.size.x / 2 > b + tileSize.x / 2) {
                                directionLock.left = true;
                                this.pos.x +=
                                    (this.pos.x + this.size.x / 2 - (b + tileSize.x / 2)) *
                                    this.moveSpeed *
                                    deltaTimeFixed;
                            }

                            if (this.pos.y - this.size.y / 2 < i - tileSize.y / 2) {
                                directionLock.down = true;
                                this.pos.y +=
                                    (this.pos.y - this.size.y / 2 - (i - tileSize.y / 2)) *
                                    this.moveSpeed *
                                    deltaTimeFixed;
                            }

                            if (this.pos.y + this.size.y / 2 > i + tileSize.y / 2) {
                                directionLock.up = true;
                                this.pos.y -= (i + tileSize.y / 2 - (this.pos.y + this.size.y / 2)) * deltaTimeFixed;
                            }
                        }
                    } else {
                        collidedWall = false;
                    }
                    if (collidedWall) {
                        hitCounter += 1;
                    }
                    if (hitCounter > 0) {
                        this.sprite.img = "enemy";
                    } else {
                        this.sprite.img = "player";
                    }
                } catch (e) { }
            }
        }
    }